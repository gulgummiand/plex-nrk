# -*- coding: utf-8 -*-

IMAGE_BASE_URL = 'http://gfx.nrk.no/{}'

TVAPI_HEADERS = {
    'User-Agent': 'plex.tv',
    'app-version-android': 999
}

def MetadataObjectForURL(url):
    media_json = JSON.ObjectFromURL(url, headers = TVAPI_HEADERS)

    # TODO: Temporary check. More robust to see if manifest contains video stream.
    if 'nrk-radio-live' in media_json['mediaUrl']:
        meta_object = TrackObject()
    else:
        available_timestamp = media_json.get('usageRights', {}).get('availableFrom')
        available_date = Datetime.FromTimestamp(available_timestamp/1000) if available_timestamp else None
        meta_object = VideoClipObject(
            originally_available_at = available_date,
            summary = media_json.get('description'),
            content_rating = media_json.get('legalAge')
        )

    meta_object.duration = media_json.get('duration')
    meta_object.title = media_json.get('fullTitle') or media_json.get('title')
    meta_object.thumb = GetImageURL(media_json.get('imageId'))
    meta_object.art = GetImageURL(media_json.get('imageId'))

    return meta_object


def MediaObjectsForURL(url):    
    mo = MediaObject(
        audio_channels = 2,
        optimized_for_streaming = True,
        parts = [
            PartObject(
                key = HTTPLiveStreamURL(Callback(PlayVideo, url = url))
            )
        ]
    )
    return [mo]


def PlayVideo(url):
    program = JSON.ObjectFromURL(url, headers = TVAPI_HEADERS)
    m3u8_url = program['mediaUrl']
    return Redirect(m3u8_url)
        
    

def GetImageURL(image_id):
    return IMAGE_BASE_URL.format(image_id) if image_id else None
